name: Check product prices

on:
  schedule:
    # Uruchamiaj codziennie o 8:00 i 20:00
    - cron: "0 8,20 * * *"
  workflow_dispatch: # pozwala uruchomić ręcznie

jobs:
  check_prices:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install requests beautifulsoup4

      - name: Check product prices
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - << 'EOF'
          import json
          import requests
          from pathlib import Path
          from bs4 import BeautifulSoup

          DATA_FILE = Path("data/produkty.json")

          if not DATA_FILE.exists():
              print("Brak pliku produkty.json")
              exit(0)

          with open(DATA_FILE, "r", encoding="utf-8") as f:
              products = json.load(f)

          for product in products:
              url = product["url"]
              old_price = product.get("cena", 0)

              # Pobranie zawartości strony
              try:
                  r = requests.get(url, timeout=10)
                  r.raise_for_status()
                  soup = BeautifulSoup(r.text, "html.parser")

                  # Przykładowy parser ceny — dostosuj do sklepu
                  price_tag = soup.select_one(".price")  # klasa CSS ceny
                  if price_tag:
                      new_price = float(price_tag.get_text(strip=True).replace(",", ".").replace("zł","").strip())
                  else:
                      new_price = old_price
              except Exception as e:
                  print(f"Błąd pobierania ceny dla {url}: {e}")
                  new_price = old_price

              # Sprawdzenie zmiany ceny
              if new_price != old_price:
                  msg = f"Cena produktu '{product['nazwa']}' zmieniła się z {old_price} na {new_price}\n{url}"
                  print(msg)
                  requests.get(f"https://api.telegram.org/bot{os.environ['TELEGRAM_TOKEN']}/sendMessage",
                               params={"chat_id": os.environ['TELEGRAM_CHAT_ID'], "text": msg})
                  product["cena"] = new_price

          # Zapis aktualizacji do pliku
          with open(DATA_FILE, "w", encoding="utf-8") as f:
              json.dump(products, f, ensure_ascii=False, indent=2)
          EOF
